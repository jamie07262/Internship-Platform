{
	"info": {
		"_postman_id": "a3185dfb-5dc8-4d07-b969-79d9d029b7e1",
		"name": "Internship Platform API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42003085",
		"_collection_link": "https://www.postman.com/royal-byte-coders/workspace/royal-byte-coders-workspace/collection/42003085-a3185dfb-5dc8-4d07-b969-79d9d029b7e1?action=share&source=collection_link&creator=42003085"
	},
	"item": [
		{
			"name": "Creation",
			"item": [
				{
					"name": "Create Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"\tpm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Staff created successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Staff account created\");\r",
									"    pm.expect(responseJson).to.have.property(\"staff_id\");\r",
									"    pm.environment.set(\"staff_id\", responseJson.staff_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststaff\",\r\n    \"password\": \"staffpass\",\r\n    \"email\": \"test.staff@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/staff",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Failure) Create Staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Username already taken\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"username already taken\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststaff\",\r\n    \"password\": \"staffpass\",\r\n    \"email\": \"test.staff@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/staff",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Employer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"\tpm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Employer created successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Employer account created\");\r",
									"    pm.expect(responseJson).to.have.property(\"employer_id\");\r",
									"    pm.environment.set(\"employer_id\", responseJson.employer_id);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"employer\",\r\n    \"password\": \"emppass\",\r\n    \"email\": \"employer.@example.com\",\r\n    \"companyName\": \"TechCorp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employer"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Failure) Create Employer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Username already taken\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"username already taken\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"employer\",\r\n    \"password\": \"emppass\",\r\n    \"email\": \"employer.@example.com\",\r\n    \"companyName\": \"TechCorp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/employer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"\tpm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Student created successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.equal(\"Student account created\");\r",
									"    pm.expect(responseJson).to.have.property(\"student_id\");\r",
									"    pm.environment.set(\"student_id\", responseJson.student_id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststudent\",\r\n    \"password\": \"studentpass\",\r\n    \"email\": \"test.student@example.com\",\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Student\", \r\n    \"skills\": \"Python, JavaScript, React\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/student",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Failure) Create Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Username already taken\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"username already taken\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststudent\",\r\n    \"password\": \"studentpass\",\r\n    \"email\": \"test.student@example.com\",\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Student\", \r\n    \"skills\": \"Python, JavaScript, React\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/student",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Staff login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"access_token\");\r",
									"\r",
									"    pm.environment.set(\"staff_token\", responseJson.access_token);\r",
									"    pm.environment.set(\"staff_id\", responseJson.user_id); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststaff\",\r\n    \"password\": \"staffpass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Employer login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"access_token\");\r",
									"\r",
									"    pm.environment.set(\"employer_token\", responseJson.access_token);\r",
									"    pm.environment.set(\"employer_id\", responseJson.user_id); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"employer\",\r\n    \"password\": \"emppass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"access_token\");\r",
									"\r",
									"    pm.environment.set(\"student_token\", responseJson.access_token);\r",
									"    pm.environment.set(\"student_id\", responseJson.user_id); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"teststudent\",\r\n    \"password\": \"studentpass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Invalid user) Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid credentials\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.includes(\"Invalid credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"invaliduser\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Missing Info) Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for missing credentials\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.includes('Username and password are required');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \" \",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internship",
			"item": [
				{
					"name": "(Employer) Create Internship",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Internship created successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.include(\"Internship created\");\r",
									"    pm.environment.set(\"internship_id\", responseJson.internship_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Software Developer\",\r\n    \"description\": \"Work on Python projects\",\r\n    \"duration\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Duplicate) Create Internship",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Duplicate error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Duplicate internship\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Software Developer\",\r\n    \"description\": \"Work on Python projects\",\r\n    \"duration\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Create Internship",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Employer authorization required error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Access denied\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Software Developer\",\r\n    \"description\": \"Work on JavaScript projects\",\r\n    \"duration\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Missing Info) Create Internship",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Missing fields error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"cannot be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"\",\r\n    \"description\": \" \",\r\n    \"duration\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Identify Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user info\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('user_id');\r",
									"    pm.expect(responseJson).to.have.property('username');\r",
									"    pm.expect(responseJson).to.have.property('user_type');\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/identify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) Create Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Shortlist created successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.include(\"Shortlist created\");\r",
									"    pm.environment.set(\"shortlist_id\", responseJson.shortlist_id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"internship_id\":{{internship_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) Create Shortlist Duplicate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 Internal Server Error\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Duplicate error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Duplicate shortlist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"internship_id\":{{internship_id}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) Internship do not exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid internship ID error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"internship_id\":9999\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Create shortlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Access denied\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"internship_id\":{{internship_id}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) Add Student to Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Student added to shortlist successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.include(\"added to shortlist\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"student_id\":{{student_id}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/shortlists/{{shortlist_id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists",
								"{{shortlist_id}}",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Add Student to Shortlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Access denied\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"internship_id\":{{internship_id}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Missing ID) Add Student to ShortList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Missing fields error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"student_id is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shortlists/{{shortlist_id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists",
								"{{shortlist_id}}",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Invalid or already added ID) Add Student to Shortlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Missing fields error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Failed to add student\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"student_id\" : 8\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/shortlists/{{shortlist_id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shortlists",
								"{{shortlist_id}}",
								"students"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) List Internships",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"const internshipSchema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\"type\": \"integer\"},\r",
									"      \"company_name\": {\"type\": \"string\"},\r",
									"      \"description\": {\"type\": \"string\"},\r",
									"      \"duration\": {\"type\": \"integer\"},\r",
									"      \"employer_id\": {\"type\": \"integer\"},\r",
									"      \"title\": {\"type\": \"string\"}\r",
									"    \r",
									"    },\r",
									"    \"required\": [\"id\",\"company_name\", \"description\", \"duration\", \"employer_id\",\"title\"]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test('Internships schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(internshipSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) List Internships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Access denied\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) List Students",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"const studentsSchema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\"type\": \"integer\"},\r",
									"      \"username\": {\"type\": \"string\"},\r",
									"      \"email\": {\"type\": \"string\"},\r",
									"      \"firstName\": {\"type\": \"string\"},\r",
									"      \"lastName\": {\"type\": \"string\"},\r",
									"      \"skills\": {\"type\": \"string\"},\r",
									"      \"type\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"id\", \"username\",\"email\", \"firstName\", \"lastName\", \"skills\", \"type\"]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test('Students schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(studentsSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) List Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.include(\"Access denied\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/internships",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"internships"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Staff) Get Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Get Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Access denied - staff authorization required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/staff/{{staff_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"staff",
								"{{staff_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employer",
			"item": [
				{
					"name": "Identify Employer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user info\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('user_id');\r",
									"    pm.expect(responseJson).to.have.property('username');\r",
									"    pm.expect(responseJson).to.have.property('user_type');\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/identify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Employer) Get Employer Shortlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"const employerShortlistSchema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"shortlist_id\": {\"type\": \"integer\"},\r",
									"      \"internship_title\": {\"type\": \"string\"},\r",
									"      \"internship_id\": {\"type\": \"integer\"},\r",
									"      \"student_id\": {\"type\": \"integer\"},\r",
									"      \"student_name\": {\"type\": \"string\"},\r",
									"      \"student_email\": {\"type\": \"string\"},\r",
									"      \"student_skills\": {\"type\": \"string\"},\r",
									"      \"status\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"shortlist_id\",\r",
									"      \"internship_title\", \r",
									"      \"internship_id\",\r",
									"      \"student_id\",\r",
									"      \"student_name\",\r",
									"      \"student_email\",\r",
									"      \"student_skills\",\r",
									"      \"status\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test('Employer shortlist schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(employerShortlistSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/employer/{{employer_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employer",
								"{{employer_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Get Employer Shortlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Access denied - employer authorization required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/employer/{{employer_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"employer",
								"{{employer_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Employer) Accept Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{employer_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships/{{internship_id}}/students/{{student_id}}/accept",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships",
								"{{internship_id}}",
								"students",
								"{{student_id}}",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Accept Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Access denied - employer authorization required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships/{{internship_id}}/students/{{student_id}}/accept",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships",
								"{{internship_id}}",
								"students",
								"{{student_id}}",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Employer) Reject Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"employer_token\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: \"Bearer \" + token\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/internships/{{internship_id}}/students/{{student_id}}/reject",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships",
								"{{internship_id}}",
								"students",
								"{{student_id}}",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Reject Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Access denied - employer authorization required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/internships/{{internship_id}}/students/{{student_id}}/accept",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"internships",
								"{{internship_id}}",
								"students",
								"{{student_id}}",
								"accept"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "Identify Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user info\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('user_id');\r",
									"    pm.expect(responseJson).to.have.property('username');\r",
									"    pm.expect(responseJson).to.have.property('user_type');\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/identify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Student) Get Student Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/student/{{student_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"student",
								"{{student_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Unauthorized) Get Student Shortlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Access denied error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Access denied - student credentials required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{staff_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/student/{{student_id}}/shortlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"student",
								"{{student_id}}",
								"shortlists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Logout message\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.equal(\"Logged out successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"JWT cookies cleared\", function () {\r",
							"    const setCookie = pm.response.headers.get(\"Set-Cookie\");\r",
							"    if (setCookie) {\r",
							"        pm.expect(setCookie).to.include(\"refresh_token_cookie\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	]
}